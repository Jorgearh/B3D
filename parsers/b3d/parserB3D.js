/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserB3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,17],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[5,8],$V9=[5,10,25,36,44,158,159,160],$Va=[1,27],$Vb=[1,33],$Vc=[9,10,16,30,43],$Vd=[2,168],$Ve=[1,49],$Vf=[1,56],$Vg=[1,47],$Vh=[1,46],$Vi=[1,42],$Vj=[1,50],$Vk=[1,65],$Vl=[1,66],$Vm=[1,63],$Vn=[1,64],$Vo=[1,44],$Vp=[1,67],$Vq=[1,68],$Vr=[1,61],$Vs=[1,69],$Vt=[9,16,41],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[16,39,41,117,118,119,120,121],$VA=[1,90],$VB=[1,89],$VC=[1,88],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[16,39,41,43,83,117,118,119,120,121,125,126,127,128,138,139,140,141,142,143],$VH=[2,134],$VI=[1,107],$VJ=[1,106],$VK=[1,104],$VL=[1,108],$VM=[9,16,39,41,43,83,117,118,119,120,121,125,126,127,128,138,139,140,141,142,143],$VN=[1,114],$VO=[9,30],$VP=[1,120],$VQ=[10,31,38,83,130,133,134,135,136,146,147,152,156],$VR=[16,27,30,39,41,43,64,83,117,118,119,120,121,125,126,127,128,138,139,140,141,142,143],$VS=[1,183],$VT=[1,186],$VU=[1,187],$VV=[1,188],$VW=[1,189],$VX=[1,190],$VY=[1,191],$VZ=[1,192],$V_=[1,193],$V$=[1,194],$V01=[1,195],$V11=[1,196],$V21=[1,203],$V31=[1,204],$V41=[1,205],$V51=[1,206],$V61=[1,207],$V71=[1,202],$V81=[8,10,13,158,159,160],$V91=[16,39,41,117,118],$Va1=[16,39,41,117,118,119,120],$Vb1=[16,39,41,83,117,118,119,120,121,125,138,139,140,141,142,143],$Vc1=[16,39,41,43,83,117,118,119,120,121,125,126,127,138,139,140,141,142,143],$Vd1=[16,39,41,43,64,66,83,117,118,119,120,121,125,126,127,128,138,139,140,141,142,143],$Ve1=[39,41],$Vf1=[5,10,13,25,31,36,44,71,73,74,77,85,86,87,88,89,90,91,92,94,95,97,103,104,105,106,107,108,135,136,158,159,160],$Vg1=[10,13,25,31,71,74,77,85,86,87,88,89,90,92,94,95,103,104,105,106,107,108,135,136,158,159,160],$Vh1=[1,239],$Vi1=[1,243],$Vj1=[1,339],$Vk1=[13,77],$Vl1=[13,31,77,135,136],$Vm1=[1,349],$Vn1=[1,350],$Vo1=[9,83];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LELEMENT":4,"EOF":5,"LSENTGLOB":6,"ELEMENT":7,"element":8,":":9,"ID":10,"{":11,"LATR":12,"}":13,"ATR":14,"DEC_ASG_VAR":15,";":16,"SENTGLOB":17,"DEC_VAR":18,"DEC_ARR":19,"DEC_FUNC":20,"DEC_PRINCIPAL":21,"TIPOVAR":22,"LID":23,"ASG_EXP":24,"array":25,"ARREGLO":26,"of":27,"LDIM":28,"DIM":29,"[":30,"NUM":31,"]":32,"..":33,"PARAMETROS":34,"CUERPO":35,"tipo_void":36,"LCOR":37,"(":38,")":39,"LPAR":40,",":41,"PAR":42,"*":43,"Principal":44,"LSENTLOC":45,"SENTLOC":46,"ASG":47,"CALL":48,"IF":49,"IFELSE":50,"SWITCH":51,"BREAK":52,"CONTINUE":53,"RETURN":54,"WHILE":55,"DOWHILE":56,"REPEAT":57,"FOR":58,"LOOP":59,"COUNT":60,"DOWHILEX":61,"IO":62,"EXCEPCION":63,"=":64,"PROPIEDAD":65,".":66,"ARGUMENTOS":67,"LE":68,"COND":69,"E":70,"if":71,"then":72,"else":73,"switch":74,"BOOL":75,"LCASO":76,"DEFAULT":77,"LCASOS":78,"LCASOR":79,"CASOS":80,"CASOR":81,"V":82,"-":83,"CAD":84,"break":85,"continue":86,"return":87,"while":88,"do":89,"repeat":90,"until":91,"for":92,"CONTROL":93,"loop":94,"count":95,"EXP":96,"whilex":97,"OUTSTR":98,"OUTNUM":99,"INSTR":100,"INNUM":101,"SHOW":102,"outStr":103,"outNum":104,"inStr":105,"inNum":106,"show":107,"throws":108,"EXCP":109,"NullPointerException":110,"MissingReturnStatement":111,"ArithmeticException":112,"StackOverFlowException":113,"HeapOverFlowException":114,"PoolOverFlowException":115,"CREATE":116,"||":117,"|?":118,"&&":119,"&?":120,"|&":121,"!":122,"REL":123,"OPREL":124,"+":125,"/":126,"%":127,"^":128,"VAL":129,"null":130,"CONVERSIONES":131,"OTRAS":132,"verdadero":133,"falso":134,"cad1":135,"cad2":136,"create":137,"==":138,"!=":139,"<":140,">":141,"<=":142,">=":143,"GETBOOL":144,"GETNUM":145,"getBool":146,"getNum":147,"BASE":148,"bin":149,"hex":150,"dec":151,"GETRANDOM":152,"GETLENGTH":153,"GETRAMDOM":154,"getRandom":155,"getLength":156,"TIPOVAL":157,"tipo_bool":158,"tipo_num":159,"tipo_str":160,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"element",9:":",10:"ID",11:"{",13:"}",16:";",25:"array",27:"of",30:"[",31:"NUM",32:"]",33:"..",36:"tipo_void",38:"(",39:")",41:",",43:"*",44:"Principal",64:"=",66:".",71:"if",72:"then",73:"else",74:"switch",77:"DEFAULT",83:"-",85:"break",86:"continue",87:"return",88:"while",89:"do",90:"repeat",91:"until",92:"for",94:"loop",95:"count",97:"whilex",103:"outStr",104:"outNum",105:"inStr",106:"inNum",107:"show",108:"throws",110:"NullPointerException",111:"MissingReturnStatement",112:"ArithmeticException",113:"StackOverFlowException",114:"HeapOverFlowException",115:"PoolOverFlowException",117:"||",118:"|?",119:"&&",120:"&?",121:"|&",122:"!",125:"+",126:"/",127:"%",128:"^",130:"null",133:"verdadero",134:"falso",135:"cad1",136:"cad2",137:"create",138:"==",139:"!=",140:"<",141:">",142:"<=",143:">=",146:"getBool",147:"getNum",149:"bin",150:"hex",151:"dec",152:"GETRANDOM",155:"getRandom",156:"getLength",158:"tipo_bool",159:"tipo_num",160:"tipo_str"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[7,6],[12,2],[12,1],[14,2],[14,1],[6,2],[6,1],[17,2],[17,2],[17,2],[17,1],[17,1],[18,2],[15,3],[19,5],[28,2],[28,1],[29,3],[29,5],[20,5],[20,5],[20,6],[34,2],[34,3],[40,3],[40,1],[42,3],[42,2],[42,2],[21,4],[35,2],[35,3],[45,2],[45,1],[46,2],[46,2],[46,2],[46,2],[46,2],[46,1],[46,1],[46,1],[46,2],[46,2],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,2],[46,2],[47,3],[47,3],[47,3],[65,3],[65,3],[48,2],[67,2],[67,3],[69,3],[49,4],[50,3],[51,9],[51,10],[76,1],[76,1],[78,2],[78,1],[79,2],[79,1],[80,3],[81,5],[82,1],[82,1],[52,1],[52,2],[53,1],[54,1],[54,2],[55,3],[56,4],[57,4],[58,9],[93,1],[93,1],[59,2],[59,3],[60,5],[61,8],[62,1],[62,1],[62,1],[62,1],[62,1],[98,4],[99,6],[100,6],[101,6],[102,4],[63,4],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[24,1],[24,1],[70,3],[70,3],[70,3],[70,3],[70,3],[70,2],[70,1],[123,3],[123,1],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,2],[96,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[129,1],[129,1],[129,1],[75,1],[75,1],[84,1],[84,1],[116,4],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[131,1],[131,1],[144,4],[145,8],[148,1],[148,1],[148,1],[132,1],[132,1],[154,3],[153,6],[153,4],[22,1],[22,1],[157,1],[157,1],[157,1],[23,1],[23,3],[68,3],[68,1],[26,2],[37,3],[37,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
typeof console !== 'undefined' ? console.log('EXITO') : print('exito');
break;
case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 169: case 170: case 171:
this.$ = $$[$0];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,10:$V1,15:9,17:5,18:7,19:8,20:10,21:11,22:12,25:$V2,36:$V3,44:$V4,157:16,158:$V5,159:$V6,160:$V7},{1:[3]},{5:[1,21],7:22,8:$V0},{5:[1,23],10:$V1,15:9,17:24,18:7,19:8,20:10,21:11,22:12,25:$V2,36:$V3,44:$V4,157:16,158:$V5,159:$V6,160:$V7},o($V8,[2,4]),o($V9,[2,11]),{9:[1,25]},{9:$Va,16:[1,26]},{16:[1,28]},{16:[1,29]},o($V9,[2,15]),o($V9,[2,16]),{9:[1,31],10:$Vb,23:30,30:[1,34],37:32},{9:[1,35]},{9:[1,36]},{38:[1,37]},o($Vc,[2,167]),o($Vc,$Vd),o($Vc,[2,169]),o($Vc,[2,170]),o($Vc,[2,171]),{1:[2,1]},o($V8,[2,3]),{1:[2,2]},o($V9,[2,10]),{10:[1,38]},o($V9,[2,12]),{10:$Ve,24:39,26:51,31:$Vf,38:$Vg,48:52,65:53,70:40,75:58,83:$Vh,84:57,96:45,116:41,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,137:$Vo,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($V9,[2,13]),o($V9,[2,14]),o([9,16],[2,17],{41:[1,70]}),{10:[1,71]},{9:[1,72],30:[1,73]},o($Vt,[2,172]),{32:[1,74]},{10:[1,76],26:75},{10:[1,77]},{39:[1,78]},{11:[1,79]},{16:[2,18]},{16:[2,114],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},{16:[2,115]},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:85,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($Vz,[2,122]),{38:[1,86]},o($Vz,[2,124],{124:87,43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF,138:[1,94],139:[1,95],140:[1,96],141:[1,97],142:[1,98],143:[1,99]}),{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:100,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:101,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($VG,[2,133]),o($VG,$VH,{28:102,67:103,29:105,30:$VI,38:$VJ,66:$VK}),o($VG,[2,135]),o($VG,[2,136]),o($VG,[2,137]),o($VG,[2,138],{66:$VL}),o($VG,[2,139]),o($VG,[2,140]),o($VG,[2,141]),o($VG,[2,142]),o($VG,[2,143]),o($VG,[2,155]),o($VG,[2,156]),o($VG,[2,162]),o($VG,[2,163]),o($VM,[2,146]),o($VM,[2,147]),o($VG,[2,144]),o($VG,[2,145]),{38:[1,109]},{38:[1,110]},{38:[1,111]},{10:[1,112]},{34:113,38:$VN},{10:[1,115]},{32:[1,116]},o($VO,[2,178]),{27:[1,117]},{28:102,29:105,30:$VI},{34:118,38:$VN},{11:$VP,35:119},{7:124,8:$V0,10:$V1,12:121,14:122,15:123,18:125,22:126,157:16,158:$V5,159:$V6,160:$V7},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:127,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:128,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:129,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:130,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:131,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($Vz,[2,121]),{10:[1,132]},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:133,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:134,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:135,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:136,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:137,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:138,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:139,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($VQ,[2,149]),o($VQ,[2,150]),o($VQ,[2,151]),o($VQ,[2,152]),o($VQ,[2,153]),o($VQ,[2,154]),o($VG,[2,131]),{39:[1,140],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},o([16,27,39,41,43,64,83,117,118,119,120,121,125,126,127,128,138,139,140,141,142,143],[2,176],{29:141,30:$VI}),o($VG,[2,64]),{10:[1,142]},o($VR,[2,21]),{10:$Ve,26:51,31:$Vf,38:$Vg,39:[1,143],48:52,65:53,68:144,70:145,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{31:[1,146]},{10:[1,147]},{84:148,135:$Vm,136:$Vn},{84:149,135:$Vm,136:$Vn},{10:[1,150],26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:151,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($Vt,[2,173]),{11:$VP,35:152},{10:$V1,22:156,39:[1,153],40:154,42:155,157:16,158:$V5,159:$V6,160:$V7},{34:157,38:$VN},o($VO,[2,177]),{10:$V1,22:158,157:16,158:$V5,159:$V6,160:$V7},{11:$VP,35:159},o($V9,[2,34]),{10:$VS,13:[1,160],15:164,18:163,19:165,22:126,25:$V2,26:185,45:161,46:162,47:166,48:167,49:168,50:169,51:170,52:171,53:172,54:173,55:174,56:175,57:176,58:177,59:178,60:179,61:180,62:181,63:182,65:184,71:$VT,74:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,92:$V$,94:$V01,95:$V11,98:197,99:198,100:199,101:200,102:201,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,157:16,158:$V5,159:$V6,160:$V7},{7:124,8:$V0,10:$V1,13:[1,208],14:209,15:123,18:125,22:126,157:16,158:$V5,159:$V6,160:$V7},o($V81,[2,7]),{16:[1,210]},o($V81,[2,9]),{9:$Va},{10:$Vb,23:30},o($V91,[2,116],{119:$Vw,120:$Vx,121:$Vy}),o($V91,[2,117],{119:$Vw,120:$Vx,121:$Vy}),o($Va1,[2,118],{121:$Vy}),o($Va1,[2,119],{121:$Vy}),o($Vz,[2,120]),{39:[1,211]},o($Vz,[2,123],{43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF}),o($Vb1,[2,125],{43:$VA,126:$VD,127:$VE,128:$VF}),o($Vb1,[2,126],{43:$VA,126:$VD,127:$VE,128:$VF}),o($Vc1,[2,127],{128:$VF}),o($Vc1,[2,128],{128:$VF}),o($Vc1,[2,129],{128:$VF}),o($VG,[2,130]),o($VG,[2,132]),o($VR,[2,20]),o($Vd1,[2,63]),o($VG,[2,65]),{39:[1,212],41:[1,213]},o($Ve1,[2,175],{117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy}),{32:[1,214],33:[1,215]},o($Vd1,[2,62]),{39:[1,216]},{41:[1,217]},o([39,43,83,125,126,127,128],$VH,{28:102,67:103,29:105,30:$VI,38:$VJ,41:[1,218],66:$VK}),{39:[1,219],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},o($V9,[2,24]),{11:[2,27]},{39:[1,220],41:[1,221]},o($Ve1,[2,30]),{10:[1,223],26:224,43:[1,222]},{11:$VP,35:225},{16:[2,19]},o($V9,[2,25]),o($Vf1,[2,35]),{10:$VS,13:[1,226],15:164,18:163,19:165,22:126,25:$V2,26:185,46:227,47:166,48:167,49:168,50:169,51:170,52:171,53:172,54:173,55:174,56:175,57:176,58:177,59:178,60:179,61:180,62:181,63:182,65:184,71:$VT,74:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,92:$V$,94:$V01,95:$V11,98:197,99:198,100:199,101:200,102:201,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,157:16,158:$V5,159:$V6,160:$V7},o($Vg1,[2,38]),{9:$Va,16:[1,228]},{16:[1,229]},{16:[1,230]},{16:[1,231]},{16:[1,232]},o($Vg1,[2,44],{73:[1,233]}),o($Vg1,[2,45]),o($Vg1,[2,46]),{16:[1,234]},{16:[1,235]},{16:[1,236]},o($Vg1,[2,50]),o($Vg1,[2,51]),o($Vg1,[2,52]),o($Vg1,[2,53]),o($Vg1,[2,54]),o($Vg1,[2,55]),o($Vg1,[2,56]),{16:[1,237]},{16:[1,238]},{10:$Vd,28:102,29:105,30:$VI,38:$VJ,64:$Vh1,66:$VK,67:103},{64:[1,240],66:$VL},{64:[1,241]},{38:$Vi1,69:242},{38:[1,244]},{10:[1,245],16:[2,82]},{16:[2,84]},{10:$Ve,16:[2,85],26:51,31:$Vf,38:$Vg,48:52,65:53,70:246,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{38:$Vi1,69:247},{11:$VP,35:248},{11:$VP,35:249},{38:[1,250]},{10:[1,252],11:$VP,35:251},{38:[1,253]},{16:[2,97]},{16:[2,98]},{16:[2,99]},{16:[2,100]},{16:[2,101]},{38:[1,254]},{38:[1,255]},{38:[1,256]},{38:[1,257]},{38:[1,258]},{38:[1,259]},o([5,8,10,13,158,159,160],[2,5]),o($V81,[2,6]),o($V81,[2,8]),{16:[2,148]},o($VG,[2,66]),{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:260,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($VR,[2,22]),{31:[1,261]},o($VG,[2,157]),{148:262,149:[1,263],150:[1,264],151:[1,265]},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:266,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($VG,[2,166]),{11:[2,28]},{10:$V1,22:156,42:267,157:16,158:$V5,159:$V6,160:$V7},{10:[1,268]},o($Ve1,[2,32],{28:102,29:105,30:$VI}),o($Ve1,[2,33]),o($V9,[2,26]),o($Vf1,[2,36]),o($Vg1,[2,37]),o($Vg1,[2,39]),o($Vg1,[2,40]),o($Vg1,[2,41]),o($Vg1,[2,42]),o($Vg1,[2,43]),{11:$VP,35:269},o($Vg1,[2,47]),o($Vg1,[2,48]),o($Vg1,[2,49]),o($Vg1,[2,57]),o($Vg1,[2,58]),{10:$Ve,24:270,26:51,31:$Vf,38:$Vg,48:52,65:53,70:40,75:58,83:$Vh,84:57,96:45,116:41,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,137:$Vo,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,24:271,26:51,31:$Vf,38:$Vg,48:52,65:53,70:40,75:58,83:$Vh,84:57,96:45,116:41,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,137:$Vo,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,24:272,26:51,31:$Vf,38:$Vg,48:52,65:53,70:40,75:58,83:$Vh,84:57,96:45,116:41,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,137:$Vo,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{72:[1,273]},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:274,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:275,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{16:[2,83]},{16:[2,86],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},{11:$VP,35:276},{88:[1,277],97:[1,278]},{91:[1,279]},{10:[1,283],15:281,18:125,22:126,26:185,47:282,65:184,93:280,157:16,158:$V5,159:$V6,160:$V7},o($Vg1,[2,93]),{11:$VP,35:284},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:285,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{109:286,110:[1,287],111:[1,288],112:[1,289],113:[1,290],114:[1,291],115:[1,292]},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:293,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:294,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:[1,295]},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:296,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:297,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($Ve1,[2,174],{117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy}),{32:[1,298]},{41:[1,299]},{41:[2,159]},{41:[2,160]},{41:[2,161]},{39:[1,300],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},o($Ve1,[2,29]),o($Ve1,[2,31]),o($Vg1,[2,69]),{16:[2,59]},{16:[2,60]},{16:[2,61]},{11:$VP,35:301},{39:[1,302],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},{41:[1,303],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},o($Vg1,[2,87]),{38:$Vi1,69:304},{38:[1,305]},{38:$Vi1,69:306},{16:[1,307]},{16:[2,91]},{16:[2,92]},{10:$Vd,28:102,29:105,30:$VI,64:$Vh1,66:$VK},o($Vg1,[2,94]),{39:[1,308],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},{39:[1,309]},{39:[2,108]},{39:[2,109]},{39:[2,110]},{39:[2,111]},{39:[2,112]},{39:[2,113]},{39:[1,310],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},{41:[1,311],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},{41:[1,312]},{41:[1,313],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},{39:[1,314],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},o($VR,[2,23]),{31:[1,315]},o($VG,[2,165]),o([10,13,25,31,71,73,74,77,85,86,87,88,89,90,92,94,95,103,104,105,106,107,108,135,136,158,159,160],[2,68]),o([10,11,13,25,31,71,72,74,77,85,86,87,88,89,90,92,94,95,103,104,105,106,107,108,135,136,158,159,160],[2,67]),{75:316,133:$Vk,134:$Vl},o($Vg1,[2,88]),{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:317,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},o($Vg1,[2,89]),{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:318,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{11:$VP,35:319},{16:[2,107]},{16:[2,102]},{75:320,133:$Vk,134:$Vl},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,75:58,83:$Vh,84:57,96:321,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{31:[1,322]},{16:[2,106]},{39:[1,323]},{39:[1,324]},{41:[1,325],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},{16:[1,326],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},o($Vg1,[2,95]),{39:[1,327]},{39:[1,328],43:$VA,83:$VB,125:$VC,126:$VD,127:$VE,128:$VF},{39:[1,329]},o($VG,[2,158]),{11:[1,330]},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:331,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{10:$Ve,26:51,31:$Vf,38:$Vg,48:52,65:53,70:332,75:58,83:$Vh,84:57,96:45,122:$Vi,123:43,129:48,130:$Vj,131:54,132:55,133:$Vk,134:$Vl,135:$Vm,136:$Vn,144:59,145:60,146:$Vp,147:$Vq,152:$Vr,153:62,156:$Vs},{16:[2,103]},{16:[2,104]},{16:[2,105]},{31:$Vj1,76:333,78:334,79:335,80:336,81:337,82:338,84:340,135:$Vm,136:$Vn},{39:[1,341],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},{39:[1,342],117:$Vu,118:$Vv,119:$Vw,120:$Vx,121:$Vy},{13:[1,343],77:[1,344]},o($Vk1,[2,72],{84:340,80:345,82:346,31:$Vj1,135:$Vm,136:$Vn}),o($Vk1,[2,73],{84:340,81:347,82:348,31:$Vj1,135:$Vm,136:$Vn}),o($Vl1,[2,75]),o($Vl1,[2,77]),{9:$Vm1,83:$Vn1},o($Vo1,[2,80]),o($Vo1,[2,81]),o($Vg1,[2,96]),{11:$VP,35:351},o($Vg1,[2,70]),{13:[1,352]},o($Vl1,[2,74]),{9:$Vm1},o($Vl1,[2,76]),{83:$Vn1},{10:$VS,15:164,18:163,19:165,22:126,25:$V2,26:185,45:353,46:162,47:166,48:167,49:168,50:169,51:170,52:171,53:172,54:173,55:174,56:175,57:176,58:177,59:178,60:179,61:180,62:181,63:182,65:184,71:$VT,74:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,92:$V$,94:$V01,95:$V11,98:197,99:198,100:199,101:200,102:201,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,157:16,158:$V5,159:$V6,160:$V7},{31:$Vj1,82:354,84:340,135:$Vm,136:$Vn},o($Vg1,[2,90]),o($Vg1,[2,71]),o($Vl1,[2,78],{157:16,22:126,18:163,15:164,19:165,47:166,48:167,49:168,50:169,51:170,52:171,53:172,54:173,55:174,56:175,57:176,58:177,59:178,60:179,61:180,62:181,63:182,65:184,26:185,98:197,99:198,100:199,101:200,102:201,46:227,10:$VS,25:$V2,71:$VT,74:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,92:$V$,94:$V01,95:$V11,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,158:$V5,159:$V6,160:$V7}),{9:[1,355]},{10:$VS,15:164,18:163,19:165,22:126,25:$V2,26:185,45:356,46:162,47:166,48:167,49:168,50:169,51:170,52:171,53:172,54:173,55:174,56:175,57:176,58:177,59:178,60:179,61:180,62:181,63:182,65:184,71:$VT,74:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,92:$V$,94:$V01,95:$V11,98:197,99:198,100:199,101:200,102:201,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,157:16,158:$V5,159:$V6,160:$V7},o($Vl1,[2,79],{157:16,22:126,18:163,15:164,19:165,47:166,48:167,49:168,50:169,51:170,52:171,53:172,54:173,55:174,56:175,57:176,58:177,59:178,60:179,61:180,62:181,63:182,65:184,26:185,98:197,99:198,100:199,101:200,102:201,46:227,10:$VS,25:$V2,71:$VT,74:$VU,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_,92:$V$,94:$V01,95:$V11,103:$V21,104:$V31,105:$V41,106:$V51,107:$V61,108:$V71,158:$V5,159:$V6,160:$V7})],
defaultActions: {21:[2,1],23:[2,2],39:[2,18],41:[2,115],153:[2,27],158:[2,19],189:[2,84],197:[2,97],198:[2,98],199:[2,99],200:[2,100],201:[2,101],211:[2,148],220:[2,28],245:[2,83],263:[2,159],264:[2,160],265:[2,161],270:[2,59],271:[2,60],272:[2,61],281:[2,91],282:[2,92],287:[2,108],288:[2,109],289:[2,110],290:[2,111],291:[2,112],292:[2,113],309:[2,107],310:[2,102],314:[2,106],327:[2,103],328:[2,104],329:[2,105]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* comentario de una sola linea*/
break;
case 2:/* comentario de varias lineas */
break;
case 3:return 125
break;
case 4:return 83
break;
case 5:return 43
break;
case 6:return 126
break;
case 7:return 127
break;
case 8:return 128
break;
case 9:return 138
break;
case 10:return 139
break;
case 11:return 140
break;
case 12:return 140
break;
case 13:return 143
break;
case 14:return 142
break;
case 15:return 117
break;
case 16:return 118
break;
case 17:return 119
break;
case 18:return 120
break;
case 19:return 121
break;
case 20:return 122
break;
case 21:return 38
break;
case 22:return 39
break;
case 23:return 30
break;
case 24:return 32
break;
case 25:return 11
break;
case 26:return 13
break;
case 27:return 9
break;
case 28:return 41
break;
case 29:return 16
break;
case 30:return 33
break;
case 31:return 64
break;
case 32:return 66
break;
case 33:return 158
break;
case 34:return 159
break;
case 35:return 160
break;
case 36:return 36
break;
case 37:return 25
break;
case 38:return 27
break;
case 39:return 8
break;
case 40:return 137
break;
case 41:return 44
break;
case 42:return 71
break;
case 43:return 72
break;
case 44:return 73
break;
case 45:return 74
break;
case 46:return 'case'
break;
case 47:return 'default'
break;
case 48:return 85
break;
case 49:return 86
break;
case 50:return 87
break;
case 51:return 88
break;
case 52:return 89
break;
case 53:return 90
break;
case 54:return 91
break;
case 55:return 92
break;
case 56:return 94
break;
case 57:return 95
break;
case 58:return 97
break;
case 59:return 146
break;
case 60:return 147
break;
case 61:return 149
break;
case 62:return 150
break;
case 63:return 151
break;
case 64:return 103
break;
case 65:return 104
break;
case 66:return 105
break;
case 67:return 106
break;
case 68:return 107
break;
case 69:return 155
break;
case 70:return 156
break;
case 71:return 108
break;
case 72:return 110
break;
case 73:return 111
break;
case 74:return 112
break;
case 75:return 113
break;
case 76:return 114
break;
case 77:return 115
break;
case 78:return 133;
break;
case 79:return 134;
break;
case 80:return 130;
break;
case 81:return 135;
break;
case 82:return 136;
break;
case 83:return 31;
break;
case 84:return 10;
break;
case 85:return 5
break;
case 86:console.log("[" + yy_.yytext + "]");return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:%[^\n]*)/,/^(?:¿[^\?]*\?)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:&\?)/,/^(?:\|&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.)/,/^(?:=)/,/^(?:\.)/,/^(?:bool\b)/,/^(?:num\b)/,/^(?:str\b)/,/^(?:void\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:element\b)/,/^(?:create\b)/,/^(?:Principal\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:"bin")/,/^(?:"hex")/,/^(?:"dec")/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:throws\b)/,/^(?:NullPointerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:NULL\b)/,/^(?:"(.|\n)*")/,/^(?:'(.|\n)*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z]([a-zA-Z]|[0-9]|_)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserB3D;
exports.Parser = parserB3D.Parser;
exports.parse = function () { return parserB3D.parse.apply(parserB3D, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}